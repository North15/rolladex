import React, { useState } from "react";
import Head from "next/head";
import {
    Container,
    VStack,
    Heading,
    ButtonGroup,
    Button,
} from "@chakra-ui/react";
import { Formik, Form } from "formik";
import * as Yup from "yup";
import { useRouter } from "next/router";
import LoginInput from "./sub/loginInput";
import { useRegisterAccountMutation } from "../../../../generated/graphql";
import { ApolloError } from "apollo-server-micro";
import StatusText from "./sub/statusText";

const Register = () => {
    const router = useRouter();
    const [registerMutation] = useRegisterAccountMutation({
        notifyOnNetworkStatusChange: true,
    });
    const [errMsg, setErrMsg] = useState<string | undefined>();
    const [statusMsg, setStatusMsg] = useState<string | undefined>();
    return (
        <Container h="100vh">
            <Head>
                <title>Register</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Formik
                initialValues={{
                    username: "",
                    email: "",
                    password: "",
                    confirm: "",
                }}
                validationSchema={Yup.object({
                    username: Yup.string()
                        .required("Username is required")
                        .min(6, "Username too short"),
                    password: Yup.string()
                        .required("Password is required")
                        .min(6, "Password too short"),
                    email: Yup.string()
                        .required("Email is required")
                        .email("Invalid Email"),
                    confirm: Yup.string()
                        .required("Password confirmation is required.")
                        .oneOf(
                            [Yup.ref("password"), null],
                            "Passwords don't match"
                        ),
                })}
                onSubmit={async (values, actions) => {
                    const creds = { ...values };
                    actions.resetForm();
                    try {
                        const { data } = await registerMutation({
                            variables: {
                                credentials: {
                                    email: creds.email,
                                    username: creds.username,
                                    password: creds.password,
                                },
                            },
                        });
                        setStatusMsg(data?.createAccount?.message);
                    } catch (error) {
                        setErrMsg((error as ApolloError).message);
                    }
                }}
            >
                <VStack h="100%" justify="center">
                    <VStack as={Form} shadow="2xl" w="100%" bg="gray.50" p="4">
                        <Heading>Register</Heading>
                        <StatusText
                            errMsg={errMsg}
                            statusMsg={statusMsg}
                        ></StatusText>
                        <LoginInput name="email" label="Email" />
                        <LoginInput name="username" label="Username" />
                        <LoginInput
                            name="password"
                            type="password"
                            label="Password"
                        />
                        <LoginInput
                            name="confirm"
                            type="password"
                            label="Confirm Password"
                        />
                        <ButtonGroup
                            colorScheme="purple"
                            w="100%"
                            size="lg"
                            pt="4"
                        >
                            <Button
                                variant="outline"
                                w="100%"
                                onClick={() => router.push("/login")}
                            >
                                Login
                            </Button>
                            <Button w="100%" type="submit">
                                Sign Up
                            </Button>
                        </ButtonGroup>
                    </VStack>
                </VStack>
            </Formik>
        </Container>
    );
};

export default Register;
